// This file was generated by json2swift. https://github.com/ijoshsmith/json2swift

import Foundation

struct ChatHistory: CreatableFromJSON { // TODO: Rename this struct
    let chatbotUser: ChatbotUser?
    let data: [Data]
    let isSuccess: Bool
    init(chatbotUser: ChatbotUser?, data: [Data], isSuccess: Bool) {
        self.chatbotUser = chatbotUser
        self.data = data
        self.isSuccess = isSuccess
    }
    init?(json: [String: Any]) {
        let chatbotUser = ChatbotUser(json: json, key: "chatbot_user")
        guard let data = Data.createRequiredInstances(from: json, arrayKey: "data") else { return nil }
        guard let isSuccess = json["is_success"] as? Bool else { return nil }
        self.init(chatbotUser: chatbotUser, data: data, isSuccess: isSuccess)
    }
    struct ChatbotUser: CreatableFromJSON { // TODO: Rename this struct
        let name: String
        let phoneNumber: String
        init(name: String, phoneNumber: String) {
            self.name = name
            self.phoneNumber = phoneNumber
        }
        init?(json: [String: Any]) {
            guard let name = json["name"] as? String else { return nil }
            guard let phoneNumber = json["phone_number"] as? String else { return nil }
            self.init(name: name, phoneNumber: phoneNumber)
        }
    }
    struct Data: CreatableFromJSON { // TODO: Rename this struct
        let annotatedAt: Int
        //let annotation: Annotation?
        let annotatorId: String
        let createdAt: Int
        let createdOn: Int
        let textHash: String
        let utterance: Utterance?
        let utteranceId: String
        let utteranceType: String
        init(annotatedAt: Int, annotatorId: String, createdAt: Int, createdOn: Int, textHash: String, utterance: Utterance?, utteranceId: String, utteranceType: String) {
            self.annotatedAt = annotatedAt
            //self.annotation = annotation
            self.annotatorId = annotatorId
            self.createdAt = createdAt
            self.createdOn = createdOn
            self.textHash = textHash
            self.utterance = utterance
            self.utteranceId = utteranceId
            self.utteranceType = utteranceType
        }
        init?(json: [String: Any]) {
             let annotatedAt = json["annotated_at"] as? Int ?? 0
             //let annotation = Annotation(json: json, key: "annotation")
             let annotatorId = json["annotator_id"] as? String ?? ""
             let createdAt = json["created_at"] as? Int ?? 0
             let createdOn = json["created_on"] as? Int ?? 0
             let textHash = json["text_hash"] as? String ?? ""
             let utterance = Utterance(json: json, key: "utterance")
             let utteranceId = json["utterance_id"] as? String ?? ""
             let utteranceType = json["utterance_type"] as? String ?? ""
            self.init(annotatedAt: annotatedAt, annotatorId: annotatorId, createdAt: createdAt, createdOn: createdOn, textHash: textHash, utterance: utterance, utteranceId: utteranceId, utteranceType: utteranceType)
        }
        struct Annotation: CreatableFromJSON { // TODO: Rename this struct
            let entities: [Any?]
            let intent: String
            init(entities: [Any?], intent: String) {
                self.entities = entities
                self.intent = intent
            }
            init?(json: [String: Any]) {
                guard let entities = json["entities"] as? [Any?] else { return nil }
                guard let intent = json["intent"] as? String else { return nil }
                self.init(entities: entities, intent: intent)
            }
        }
        struct Utterance: CreatableFromJSON { // TODO: Rename this struct
            let bOTREQUEST: BOTREQUEST?
            let bOTRESPONSE: [BOTRESPONSE]?
            //let nluResponse: NluResponse?
            init(bOTREQUEST: BOTREQUEST?, bOTRESPONSE: [BOTRESPONSE]?) {
                self.bOTREQUEST = bOTREQUEST
                self.bOTRESPONSE = bOTRESPONSE
                //self.nluResponse = nluResponse
            }
            init?(json: [String: Any]) {
                let bOTREQUEST = BOTREQUEST(json: json, key: "_BOT_REQUEST_")
                let bOTRESPONSE = BOTRESPONSE.createRequiredInstances(from: json, arrayKey: "_BOT_RESPONSE_")
                //let nluResponse = NluResponse(json: json, key: "nlu_response")
                self.init(bOTREQUEST: bOTREQUEST, bOTRESPONSE: bOTRESPONSE)
            }
            struct BOTREQUEST: CreatableFromJSON { // TODO: Rename this struct
                let botId: String
                let channel: String
                let text: String?
                let userId: String
                init(botId: String, channel: String, text: String?, userId: String) {
                    self.botId = botId
                    self.channel = channel
                    self.text = text
                    self.userId = userId
                }
                init?(json: [String: Any]) {
                     let botId = json["bot_id"] as? String ?? ""
                     let channel = json["channel"] as? String ?? ""
                     let text = json["text"] as? String
                     let userId = json["user_id"] as? String ?? ""
                    self.init(botId: botId, channel: channel, text: text, userId: userId)
                }
            }
            struct BOTRESPONSE: CreatableFromJSON { // TODO: Rename this struct
                let botId: String
                let channel: String
                let texts: [String]?
                let quickReplies: QuickReplies?
                let userId: String
                init(botId: String, channel: String, quickReplies: QuickReplies?, userId: String,texts:[String]?) {
                    self.botId = botId
                    self.channel = channel
                    self.quickReplies = quickReplies
                    self.userId = userId
                    self.texts = texts
                }
                init?(json: [String: Any]) {
                     let botId = json["bot_id"] as? String ?? ""
                     let channel = json["channel"] as? String ?? ""
                     let quickReplies = QuickReplies(json: json, key: "quick_replies")
                     let userId = json["user_id"] as? String ?? ""
                     let texts = json["texts"] as? [String]
                    self.init(botId: botId, channel: channel, quickReplies: quickReplies, userId: userId,texts:texts)
                }
                struct QuickReplies: CreatableFromJSON { // TODO: Rename this struct
                    let headerText: String
                    let inlineButtons: [InlineButtons]?
                    init(headerText: String, inlineButtons: [InlineButtons]?) {
                        self.headerText = headerText
                        self.inlineButtons = inlineButtons
                    }
                    init?(json: [String: Any]) {
                         let headerText = json["header_text"] as? String ?? ""
                         let inlineButtons = InlineButtons.createRequiredInstances(from: json, arrayKey: "inline_buttons")
                        self.init(headerText: headerText, inlineButtons: inlineButtons)
                    }
                    struct InlineButtons: CreatableFromJSON { // TODO: Rename this struct
                        let payload: String
                        let title: String
                        let type: String
                        init(payload: String, title: String, type: String) {
                            self.payload = payload
                            self.title = title
                            self.type = type
                        }
                        init?(json: [String: Any]) {
                            guard let payload = json["payload"] as? String else { return nil }
                            guard let title = json["title"] as? String else { return nil }
                            guard let type = json["type"] as? String else { return nil }
                            self.init(payload: payload, title: title, type: type)
                        }
                    }
                }
            }
            struct NluResponse: CreatableFromJSON { // TODO: Rename this struct
                let entities: [Entities]
                let intent: Intent
                let intentRanking: [IntentRanking]
                let tempM1Response: TempM1Response
                let text: String
                init(entities: [Entities], intent: Intent, intentRanking: [IntentRanking], tempM1Response: TempM1Response, text: String) {
                    self.entities = entities
                    self.intent = intent
                    self.intentRanking = intentRanking
                    self.tempM1Response = tempM1Response
                    self.text = text
                }
                init?(json: [String: Any]) {
                    guard let entities = Entities.createRequiredInstances(from: json, arrayKey: "entities") else { return nil }
                    guard let intent = Intent(json: json, key: "intent") else { return nil }
                    guard let intentRanking = IntentRanking.createRequiredInstances(from: json, arrayKey: "intent_ranking") else { return nil }
                    guard let tempM1Response = TempM1Response(json: json, key: "temp_m1_response") else { return nil }
                    guard let text = json["text"] as? String else { return nil }
                    self.init(entities: entities, intent: intent, intentRanking: intentRanking, tempM1Response: tempM1Response, text: text)
                }
                struct Entities: CreatableFromJSON { // TODO: Rename this struct
                    let confidence: Double
                    let end: Int
                    let entity: String
                    let extractor: String
                    let processors: [String]
                    let start: Int
                    let value: String
                    init(confidence: Double, end: Int, entity: String, extractor: String, processors: [String], start: Int, value: String) {
                        self.confidence = confidence
                        self.end = end
                        self.entity = entity
                        self.extractor = extractor
                        self.processors = processors
                        self.start = start
                        self.value = value
                    }
                    init?(json: [String: Any]) {
                        guard let confidence = Double(json: json, key: "confidence") else { return nil }
                        guard let end = json["end"] as? Int else { return nil }
                        guard let entity = json["entity"] as? String else { return nil }
                        guard let extractor = json["extractor"] as? String else { return nil }
                        guard let processors = json["processors"] as? [String] else { return nil }
                        guard let start = json["start"] as? Int else { return nil }
                        guard let value = json["value"] as? String else { return nil }
                        self.init(confidence: confidence, end: end, entity: entity, extractor: extractor, processors: processors, start: start, value: value)
                    }
                }
                struct Intent: CreatableFromJSON { // TODO: Rename this struct
                    let confidence: Double
                    let name: String
                    init(confidence: Double, name: String) {
                        self.confidence = confidence
                        self.name = name
                    }
                    init?(json: [String: Any]) {
                        guard let confidence = Double(json: json, key: "confidence") else { return nil }
                        guard let name = json["name"] as? String else { return nil }
                        self.init(confidence: confidence, name: name)
                    }
                }
                struct IntentRanking: CreatableFromJSON { // TODO: Rename this struct
                    let confidence: Double
                    let name: String
                    init(confidence: Double, name: String) {
                        self.confidence = confidence
                        self.name = name
                    }
                    init?(json: [String: Any]) {
                        guard let confidence = Double(json: json, key: "confidence") else { return nil }
                        guard let name = json["name"] as? String else { return nil }
                        self.init(confidence: confidence, name: name)
                    }
                }
                struct TempM1Response: CreatableFromJSON { // TODO: Rename this struct
                    let entities: [Entities]
                    let intent: Intent
                    let text: String
                    init(entities: [Entities], intent: Intent, text: String) {
                        self.entities = entities
                        self.intent = intent
                        self.text = text
                    }
                    init?(json: [String: Any]) {
                        guard let entities = Entities.createRequiredInstances(from: json, arrayKey: "entities") else { return nil }
                        guard let intent = Intent(json: json, key: "intent") else { return nil }
                        guard let text = json["text"] as? String else { return nil }
                        self.init(entities: entities, intent: intent, text: text)
                    }
                    struct Entities: CreatableFromJSON { // TODO: Rename this struct
                        let confidence: Double
                        let end: Int
                        let entity: String
                        let extractor: String
                        let processors: [String]
                        let start: Int
                        let value: String
                        init(confidence: Double, end: Int, entity: String, extractor: String, processors: [String], start: Int, value: String) {
                            self.confidence = confidence
                            self.end = end
                            self.entity = entity
                            self.extractor = extractor
                            self.processors = processors
                            self.start = start
                            self.value = value
                        }
                        init?(json: [String: Any]) {
                            guard let confidence = Double(json: json, key: "confidence") else { return nil }
                            guard let end = json["end"] as? Int else { return nil }
                            guard let entity = json["entity"] as? String else { return nil }
                            guard let extractor = json["extractor"] as? String else { return nil }
                            guard let processors = json["processors"] as? [String] else { return nil }
                            guard let start = json["start"] as? Int else { return nil }
                            guard let value = json["value"] as? String else { return nil }
                            self.init(confidence: confidence, end: end, entity: entity, extractor: extractor, processors: processors, start: start, value: value)
                        }
                    }
                    struct Intent: CreatableFromJSON { // TODO: Rename this struct
                        let confidence: Int
                        let name: Any?
                        init(confidence: Int, name: Any?) {
                            self.confidence = confidence
                            self.name = name
                        }
                        init?(json: [String: Any]) {
                            guard let confidence = json["confidence"] as? Int else { return nil }
                            let name = json["name"] as? Any
                            self.init(confidence: confidence, name: name)
                        }
                    }
                }
            }
        }
    }
}


struct Chat {
    let type:String
    let text:String
    let created_at:Int
    let inline_buttons:[String]
}

