// This file was generated by json2swift. https://github.com/ijoshsmith/json2swift

import Foundation

struct WebChatUsers: CreatableFromJSON {
    let data: [Data]
    let isSuccess: Bool
    init(data: [Data], isSuccess: Bool) {
        self.data = data
        self.isSuccess = isSuccess
    }
    init?(json: [String: Any]) {
        guard let data = Data.createRequiredInstances(from: json, arrayKey: "data") else { return nil }
        guard let isSuccess = json["is_success"] as? Bool else { return nil }
        self.init(data: data, isSuccess: isSuccess)
    }
    struct Data: CreatableFromJSON {
        let agentId: Any?
        let annotatedAt: Int
        let annotation: Annotation
        let annotatorId: String
        let chatbotUser: Any?
        let conversationId: String
        let createdAt: Int
        let createdOn: Int
        let isAgentAssigned: Bool
        let textHash: String
        let utterance: Utterance
        let utteranceId: String
        let utteranceType: String
        init(agentId: Any?, annotatedAt: Int, annotation: Annotation, annotatorId: String, chatbotUser: Any?, conversationId: String, createdAt: Int, createdOn: Int, isAgentAssigned: Bool, textHash: String, utterance: Utterance, utteranceId: String, utteranceType: String) {
            self.agentId = agentId
            self.annotatedAt = annotatedAt
            self.annotation = annotation
            self.annotatorId = annotatorId
            self.chatbotUser = chatbotUser
            self.conversationId = conversationId
            self.createdAt = createdAt
            self.createdOn = createdOn
            self.isAgentAssigned = isAgentAssigned
            self.textHash = textHash
            self.utterance = utterance
            self.utteranceId = utteranceId
            self.utteranceType = utteranceType
        }
        init?(json: [String: Any]) {
            guard let annotatedAt = json["annotated_at"] as? Int else { return nil }
            guard let annotation = Annotation(json: json, key: "annotation") else { return nil }
            guard let annotatorId = json["annotator_id"] as? String else { return nil }
            guard let conversationId = json["conversation_id"] as? String else { return nil }
            guard let createdAt = json["created_at"] as? Int else { return nil }
            guard let createdOn = json["created_on"] as? Int else { return nil }
            guard let isAgentAssigned = json["is_agent_assigned"] as? Bool else { return nil }
            guard let textHash = json["text_hash"] as? String else { return nil }
            guard let utterance = Utterance(json: json, key: "utterance") else { return nil }
            guard let utteranceId = json["utterance_id"] as? String else { return nil }
            guard let utteranceType = json["utterance_type"] as? String else { return nil }
            let agentId = json["agent_id"] as? Any
            let chatbotUser = json["chatbot_user"] as? Any
            self.init(agentId: agentId, annotatedAt: annotatedAt, annotation: annotation, annotatorId: annotatorId, chatbotUser: chatbotUser, conversationId: conversationId, createdAt: createdAt, createdOn: createdOn, isAgentAssigned: isAgentAssigned, textHash: textHash, utterance: utterance, utteranceId: utteranceId, utteranceType: utteranceType)
        }
        struct Annotation: CreatableFromJSON {
            let entities: [Any?]
            let intent: String
            init(entities: [Any?], intent: String) {
                self.entities = entities
                self.intent = intent
            }
            init?(json: [String: Any]) {
                guard let entities = json["entities"] as? [Any?] else { return nil }
                guard let intent = json["intent"] as? String else { return nil }
                self.init(entities: entities, intent: intent)
            }
        }
        struct Utterance: CreatableFromJSON {
            let bOTREQUEST: BOTREQUEST
            init(bOTREQUEST: BOTREQUEST) {
                self.bOTREQUEST = bOTREQUEST
            }
            init?(json: [String: Any]) {
                guard let bOTREQUEST = BOTREQUEST(json: json, key: "_BOT_REQUEST_") else { return nil }
                self.init(bOTREQUEST: bOTREQUEST)
            }
            struct BOTREQUEST: CreatableFromJSON {
                let botId: String
                let channel: String
                let text: String
                let userId: String
                init(botId: String, channel: String, text: String, userId: String) {
                    self.botId = botId
                    self.channel = channel
                    self.text = text
                    self.userId = userId
                }
                init?(json: [String: Any]) {
                    guard let botId = json["bot_id"] as? String else { return nil }
                    guard let channel = json["channel"] as? String else { return nil }
                    guard let text = json["text"] as? String else { return nil }
                    guard let userId = json["user_id"] as? String else { return nil }
                    self.init(botId: botId, channel: channel, text: text, userId: userId)
                }
            }
        }
    }
}
